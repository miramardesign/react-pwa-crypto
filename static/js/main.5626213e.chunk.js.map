{"version":3,"sources":["CoinButton/CoinButton.jsx","HomeComponent/index.js","HomeComponent/HomeComponent.jsx","CoinDetailComponent/CoinDetailComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["coinname","CoinButton","props","componentWillMount","console","log","componentDidMount","componentWillReceiveProps","nextProps","componentWillUpdate","nextState","componentDidUpdate","componentWillUnmount","name","state","hasError","this","className","to","pathname","PureComponent","defaultProps","HomeComponent","coins","map","item","CoinDetailComponent","getCoin","coinUrl","fetch","then","res","json","result","setState","isLoaded","coinData","lastUpdated","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","Date","now","error","match","params","id","youCanGetWithThisOrYouCanGetWithThat","setInterval","price","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5626213e.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n//import { Test } from './CoinButton.styles';\nimport {  Link } from \"react-router-dom\";\n\nlet coinname;\n\nclass CoinButton extends PureComponent {\n  constructor(props) {\n    super(props);\n      \n    coinname = this.props.name\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentWillMount = () => {\n    console.log('CoinButton will mount');\n  }\n\n  componentDidMount = () => {\n    console.log('CoinButton mounted');\n\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    console.log('CoinButton will receive props', nextProps);\n  }\n\n  componentWillUpdate = (nextProps, nextState) => {\n    console.log('CoinButton will update', nextProps, nextState);\n  }\n\n  componentDidUpdate = () => {\n    console.log('CoinButton did update');\n  }\n\n  componentWillUnmount = () => {\n    console.log('CoinButton will unmount');\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return (\n      <div className=\"CoinButtonWrapper\">\n\n        <Link to={{\n          pathname: '/details/' + coinname\n          }}>\n\n          <button>\n            {coinname}\n\n          </button>\n\n        </Link>\n\n      </div>\n    );\n  }\n}\n\nCoinButton.propTypes = {\n  // bla: PropTypes.string,\n};\n\nCoinButton.defaultProps = {\n  // bla: 'test',\n};\n\nexport default CoinButton;\n","import HomeComponent from './HomeComponent';\n\nexport default HomeComponent;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport CoinButton from '../CoinButton/CoinButton';\n//import { Test } from './HomeComponent.styles';\n\nclass HomeComponent extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      coins: ['btc', 'ltc', 'eth']\n    };\n  }\n\n  componentWillMount = () => {\n    console.log('HomeComponent will mount');\n  }\n\n  componentDidMount = () => {\n    console.log('HomeComponent mounted');\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    console.log('HomeComponent will receive props', nextProps);\n  }\n\n  componentWillUpdate = (nextProps, nextState) => {\n    console.log('HomeComponent will update', nextProps, nextState);\n  }\n\n  componentDidUpdate = () => {\n    console.log('HomeComponent did update');\n  }\n\n  componentWillUnmount = () => {\n    console.log('HomeComponent will unmount');\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return (\n      <div className=\"HomeComponentWrapper\">\n        <h1>Crypto Prices Yo!</h1>\n        {this.state.coins.map(item => (\n          <div>\n            <CoinButton name={item}> ></CoinButton>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\n\n\nexport default HomeComponent;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass CoinDetailComponent extends PureComponent {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      coinData: {},\n      lastUpdated: ''\n    };\n  }\n\n  componentWillMount = () => {\n    console.log('CoinDetailComponent will mount');\n  }\n\n  getCoin = (coinname) => {\n    \n    const coinUrl = `https://financialmodelingprep.com/api/v3/cryptocurrency/${coinname}`;\n    // https://financialmodelingprep.com/developer/docs/#Cryptocurrencies\n    // https://financialmodelingprep.com/api/v3/cryptocurrencies\n\n    fetch(coinUrl)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log('result' + coinname, result);\n\n          this.setState({\n            isLoaded: true,\n            coinData: result,\n            lastUpdated: new Intl.DateTimeFormat('en-US', {\n              year: 'numeric',\n              month: 'long',\n              day: '2-digit',\n              hour: '2-digit',\n              minute: '2-digit',\n              second: '2-digit'\n\n            }).format(Date.now())\n\n          });\n        },\n\n\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  componentDidMount = () => {\n    console.log('CoinDetailComponent mounted');\n\n    const coinname = this.props.match.params.id;\n    this.getCoin(coinname);\n\n    let youCanGetWithThisOrYouCanGetWithThat = this;\n    setInterval(function(){\n      youCanGetWithThisOrYouCanGetWithThat.getCoin(coinname);\n    }, 1000 * 60 * 60);\n\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    console.log('CoinDetailComponent will receive props', nextProps);\n  }\n\n  componentWillUpdate = (nextProps, nextState) => {\n    console.log('CoinDetailComponent will update', nextProps, nextState);\n  }\n\n  componentDidUpdate = () => {\n    console.log('CoinDetailComponent did update');\n  }\n\n  componentWillUnmount = () => {\n    console.log('CoinDetailComponent will unmount');\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return (\n      <div className=\"CoinDetailComponentWrapper\">\n\n        <h1> {this.props.match.params.id} price is {this.state.coinData.price} </h1>\n        <h2> Last Update at: {this.state.lastUpdated}\n        </h2>\n      </div>\n    );\n  }\n}\n\nCoinDetailComponent.propTypes = {\n  // bla: PropTypes.string,\n};\n\nCoinDetailComponent.defaultProps = {\n  // bla: 'test',\n};\n\nexport default CoinDetailComponent;\n","import React from \"react\";\nimport \"./App.css\";\nimport HomeComponent from \"./HomeComponent\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport CoinDetailComponent from \"./CoinDetailComponent/CoinDetailComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <Router>\n          <div>\n            <nav>\n              <ul>\n                <li>\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                  <Link to=\"/details/\">coin details.</Link>\n                </li>\n              </ul>\n            </nav>\n\n            <Route path=\"/\" exact component={HomeComponent} />\n            <Route path=\"/details/:id\" component={CoinDetailComponent} />\n          </div>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}